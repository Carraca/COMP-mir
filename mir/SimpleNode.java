/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package mir;
import mir.Access_type;

public
class SimpleNode implements Node {

  public Node parent;
  public Node[] children;
  public int id;
  public Object value;
  public MIR_parser parser;
  public int line_number = -1;
  public Access_type access_type;
  // For var usaged
  public boolean derefed;
  public String element;
  
  public int liveness_begin;
  public int liveness_end;
  
  public int register;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(MIR_parser p, int i) {
    this(i);
    parser = p;
    register = 0;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  
  public String toString() { 
	  String s;
	  if(tree_print().equals("Variable")) {
		  s =  String.format("L: %d V: %s R: %d", line_number, value, register);
	  } else {
		  String inst = tree_print().replaceAll("_instruction", "");
		  s = String.format("%d: %s", line_number, inst);
	  }
	  return s;
  }
  public String tree_print(String prefix) { return prefix + tree_print(); }
  public String tree_print() { return MIR_parserTreeConstants.jjtNodeName[id]; }
  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.print(tree_print(prefix));
    System.out.print((value != null) ? ": " + value.toString() : "");
    
    if(derefed) {
    	System.out.print(", derefed");
    }
    
    if(element != null) {
    	System.out.print(", elem:" + element);
    }
    
    System.out.println("");
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + "-");
        }
      }
    }
  }
  
  public String gui_print() {
		  String s = "";
		  s += tree_print();
		  s += (value != null) ? ": " + value.toString() : "";
		    
	    if(derefed) {
	    	s += ", derefed";
	    }
	    
	    if(element != null) {
	    	s += ", elem:" + element;
	    }
	    
	    return s;
  }
}

/* JavaCC - OriginalChecksum=30f82b3acca603ee073cc568e8c3e016 (do not edit this line) */
